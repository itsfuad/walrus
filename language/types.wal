
type Circle struct {
    priv radius: f32,
};

type Rectangle struct {
    width: f32,
    height: f32,
};

impl Rectangle {
    fn area() -> f32 {
        ret 1.0;
    }
}

type IShape interface {
    fn area() -> f32;
};

let a := 0;

// a.x; // 'x' does not exist on type 'i32'

let rec := @Rectangle{width: 10.0, height: 20.0};
let cir := @Circle{radius: 10.0};

type Rec Rectangle;
type Rec2 Rec;

let rec2 : Rec2 = @Rectangle{width: 61.6, height: 54.4};

rec.width = 30.0;

fn draw(shape: IShape) {
    let area := shape.area();
}

draw(rec);
draw(cir);

type Int i32;

let wrappedInt : Int = 10.8;