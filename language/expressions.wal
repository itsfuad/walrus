//type i32 i32;
let a : i32 = 10; //10
let b := a * (34 - 18);
let c : f32 = (a * 34 - 12) as f32; //12
let d : i32 = a - 3.1416 * 18;

//multiple variable declaration in one line
// with type
let t1: i32 = 43, t2: f32 = 3.5, t3: str;
// without type
let t4 := 43, t5 := 3.14, t6 := "hello";

let x: i32 = 10;
let y: i8 = x as i8; //10

let e := "hello" + 2; // ok
let logic := a > b;
//e = "hello" - 2; // error

let int32 : i32 = 10; //10
let int64 : i64 = 10 as i64; //10
let float32 := 3 as f32; //12

let char : byte = 'a';
//let char2 := "hi" as byte; // error

let name : str = "hello";
let strIndexedChar := name[1];

//init + 4 - 2; // error

let i1 := 10;

let myMap : map[str]i32 = map[str]i32{
    "key1" : 1,
    "key2" : 2,
    "key3" : 3,
    "key4" : 4
};

let mapValue := myMap["key1"];

type Int i32;
/*
impl Int {
    fn toStr() -> str {
        ret "0";
    }
}
*/

//type i32 i32; // error

//let x : i32 = 10.6; // error

//let x := a * i32; // expected error: invalid operation between value and type

//myMap["key1"] = 10.0; // error

/*
for {
    // infinite loop
    // break logic
}
for i1 > 0; {
    // do something
    --i1;
}
for let i2 := 0; i2 < 10; i2 {
    // do something
}


//array := 0..10; // expected [0,1,2,3,4,5,6,7,8,9,10] //Not implemented yet

*/

/*
//linked list
type Node struct {
    value : i32,
    next : Node,
};

type List struct {
    head : Node
};

impl List {
    fn add(value : i32) {
        let node := @Node {
            value : value,
            next : this.head
        };
        this.head = node;
    }

    fn print() {
        let node := this.head;
        while node {
            print(node.value);
            node = node.next;
        }
    }
}
*/