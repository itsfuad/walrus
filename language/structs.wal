
type ID struct {
    priv id: int
};

type Point struct{
    priv x: int,
    y: int,
};

let point : Point;

point = @Point{ x: 13, y: 37 };

point.y = 10;

//point.id;

type Distance struct {
    start: Point,
    end: Point,
    priv max: int,
    min: int,
};

let a := 0;

let distance := @Distance{
    start: @Point{
        x: 2,
        y: 3,
    },
    end: point,
    max: 10,
    min: 0,
};

//let a := distance; // error

//distance.max = 9; // error - private prop
distance.min = 1;

type IShape interface {
    fn area() -> float;
    fn perimeter() -> float;
};

type Circle struct {
    priv radius: float,
};

type Rectangle struct {
    width: float,
    height: float,
};


impl Circle {
    fn area() -> float {
        let r := radius;
        ret radius;
    }

    fn perimeter() -> float {
        ret 2.0 * 3.14159 * radius;
    }
};

type INT int;

let i : INT = 1;

let circle := @Circle{ radius: 10.0 };
let rectangle := @Rectangle{ width: 10.0, height: 20.0 };

let perimeterOfCircle := circle.perimeter();

let area := circle.area();

let shape : IShape = circle;
let area2 := shape.area();

distance.min = 2;

fn getPoint() -> Point {
    ret @Point{ x: 1, y: 2 };
}

// getPoint = 0; // error

//getPoint().y = 4; // error

impl Rectangle {
    fn area() -> float {
        ret width * height;
    }

    fn perimeter() -> float {
        ret 2.0 * (width + height);
    }
};

fn DrawShape(shape: IShape) {
    //shape.radius; // error
    let area := shape.area();
    let perimeter := shape.perimeter();
}

DrawShape(circle);
DrawShape(rectangle);