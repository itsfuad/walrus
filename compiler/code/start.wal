// Welcome

//Variable declarations

let a := 89;

//we can also provide the type of the variable
let b : f32 = 3.5; //if i provide integer value here, it will give error

//Variable assignment
a = 90; //works

//structs

type Point struct {
    x : i32,
    y : i32
};

let p := @Point{x: 3, y: 4}; // Here @ symbol is used to create an instance of struct Point

//we can also provide the type

let p2 : Point = @Point{x: 3, y: 4};

//function declarations
fn add(a: i32, b: i32) -> i32 {
    ret a + b;
}


fn largest(a: i32, b: i32) -> i32 {
    if a > b {
        ret a; // satisfies
    } else {
        //ret b; // satisfies
    }

    ret b; //now we must have a fallback return statement :)
}

//function calls
let c := add(3, 7.7 as i32); //let's type cast :D

//interface

type IShape interface {
    fn area() -> f32
};

impl Point {
    fn area() -> f32 {
        ret (this.x + this.y) as f32;
    }
}

//implementing interface
let iShape : IShape = @Point{x: 3, y: 4}; // Point must have area function to implement IShape

//Thanks for reading! :)